image: node:10

stages:
  - build_project
  - build_image
  - k8s_deploy

.build_project: &BUILD_PROJECT
  stage: build_project
  script:
    - cd src
    - npm install
    - npm run build
  artifacts:
    name: chromeExtension-dist
    expire_in: 2 day
    paths:
      - src/dist

build_alpha_project:
  <<: *BUILD_PROJECT
  environment:
    name: alpha

build_beta_project:
  <<: *BUILD_PROJECT
  environment:
    name: beta

build_staging_project:
  <<: *BUILD_PROJECT
  environment:
    name: staging

build_production_project:
  <<: *BUILD_PROJECT
  environment:
    name: production

variables:
  IMAGE_PER_BRANCH_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_BUILD_REF
  DOCKER_DRIVER: overlay2
  IMAGE_PER_BRANCH: $CI_REGISTRY_IMAGE/$CI_BUILD_REF_NAME:latest

.docker: &DOCKER
  image: docker:latest
  services:
    - name: docker:dind
      command: ["--registry-mirror", "https://ixceb9no.mirror.aliyuncs.com"]
  before_script:
    - echo "nameserver 114.114.114.114" >> /etc/resolv.conf
    - echo "nameserver 8.8.8.8" >> /etc/resolv.conf
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  tags:
    - docker
  except:
    - tags

docker_build:
  <<: *DOCKER
  stage: build_image
  dependencies:
    - build_project
  script:
    - rm -rf src/.eslintrc.js
    - rm -rf src/chrome-extension
    - rm -rf src/tsconfig.json
    - rm -rf src/webpack.config.js
    - echo $IMAGE_PER_BRANCH_COMMIT
    - docker pull $IMAGE_PER_BRANCH || true
    - docker build --pull --cache-from $IMAGE_PER_BRANCH -t $IMAGE_PER_BRANCH_COMMIT -t $IMAGE_PER_BRANCH --build-arg CI_JOB_TOKEN=$CI_JOB_TOKEN -f Dockerfile .
    - docker push $IMAGE_PER_BRANCH_COMMIT
    - docker push $IMAGE_PER_BRANCH
  retry: 2

.deploy_base: &DEPLOY_BASE
  stage: k8s_deploy
  dependencies: []
  image: registry-mirrors.saybot.net/zhuzhu/helm-kubectl:2.9.1
  variables: &DEPLOY_BASE_VARIABLES
    RELEASE_VERSION: $CI_PROJECT_NAME-$CI_BUILD_REF
  before_script:
    - export RELEASE_NAME=${CI_PROJECT_NAME//_/-}-$CI_ENVIRONMENT_SLUG
    - echo "$KUBE_CA_PEM" > kube_ca.pem
    - kubectl config set-cluster default-cluster --server=$KUBE_URL --certificate-authority="$(pwd)/kube_ca.pem"
    - kubectl config set-credentials sa-deployment --token=$KUBE_TOKEN
    - kubectl config set-context default-system --cluster=default-cluster --user=sa-deployment --namespace $KUBE_NAMESPACE
    - kubectl config use-context default-system
    - helm ls --tiller-namespace $KUBE_NAMESPACE
    - export DEPLOYS=$(helm ls --tiller-namespace $KUBE_NAMESPACE | grep $RELEASE_NAME | wc -l)
    - export HELM_ENVS=$(eval echo $(yq r helm/values.yaml env -tj | jq -r 'to_entries|.[]|"env.\(.key|sub("\\."; "_dot_"))=__string__${\(.key):-\(.value)}"' | tr "\n" ",") || true)
    - export HELM_ARGS="--namespace=$KUBE_NAMESPACE --tiller-namespace $KUBE_NAMESPACE -f helm/values.yaml --set ${HELM_ENVS}environment=$CI_ENVIRONMENT_SLUG,image.repository=$CI_REGISTRY_IMAGE/${CI_BUILD_REF_NAME},image.tag=$CI_BUILD_REF",replicaCount=${REPLICA_COUNT:-3}
  tags:
    - docker

.deploy: &DEPLOY
  <<: *DEPLOY_BASE
  script:
    - if [ $CI_ENVIRONMENT_SLUG == 'staging' ]; then export HELM_ARGS="$HELM_ARGS,ingress.annotations.kubernetes\.io/ingress\.class=staging-nginx"; fi
    - if [ $DEPLOYS -eq 0 ]; then helm install $HELM_ARGS --name=$RELEASE_NAME helm; else helm upgrade $HELM_ARGS $RELEASE_NAME helm; fi
    - echo $RELEASE_NAME
    - echo $KUBE_CA_PEM
    - echo $HELM_ENVS
    - echo $KUBE_URL
    - echo $KUBE_TOKEN
    - echo $KUBE_NAMESPACE
    - echo $CI_ENVIRONMENT_SLUG
    - echo $CI_REGISTRY_IMAGE
    - echo $CI_BUILD_REF_NAME
    - echo $CI_BUILD_REF
    - echo $MYSQL_HOST

deploy_alpha:
  <<: *DEPLOY
  environment:
    name: alpha
    url: https://rebirth.alpha.saybot.net
    on_stop: stop_alpha
  only:
    - dev

deploy_beta:
  <<: *DEPLOY
  environment:
    name: beta
    url: https://rebirth.beta.saybot.net
    on_stop: stop_beta
  only:
    - beta

deploy_staging:
  <<: *DEPLOY
  environment:
    name: staging
    url: https://rebirth.staging.saybot.net
    on_stop: stop_staging
  only:
    - staging

deploy_production:
  <<: *DEPLOY
  environment:
    name: production
    url: https://rebirth.production.saybot.net
  only:
    - master
  tags:
    - production

.stop: &STOP
  <<: *DEPLOY_BASE
  variables:
    <<: *DEPLOY_BASE_VARIABLES
    GIT_STRATEGY: none
  script:
    - if [ $DEPLOYS -ne 0 ]; then helm del --purge $RELEASE_NAME --tiller-namespace $KUBE_NAMESPACE ; fi
  when: manual

stop_alpha:
  <<: *STOP
  environment:
    name: alpha
    action: stop
  only:
    - alpha

stop_beta:
  <<: *STOP
  environment:
    name: beta
    action: stop
  only:
    - beta

stop_staging:
  <<: *STOP
  environment:
    name: staging
    action: stop
  only:
    - staging
